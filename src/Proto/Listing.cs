// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: listing.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tutorial {

  /// <summary>Holder for reflection information generated from listing.proto</summary>
  public static partial class ListingReflection {

    #region Descriptor
    /// <summary>File descriptor for listing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ListingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1saXN0aW5nLnByb3RvEgh0dXRvcmlhbCJaCgdMaXN0aW5nEhMKC1Byb2dy",
            "YW1OYW1lGAEgASgJEhMKC0VwaXNvZGVOYW1lGAIgASgJEhUKDUVwaXNvZGVO",
            "dW1iZXIYAyABKAUSDgoGSXNMaXZlGAQgASgIYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tutorial.Listing), global::Tutorial.Listing.Parser, new[]{ "ProgramName", "EpisodeName", "EpisodeNumber", "IsLive" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Listing : pb::IMessage<Listing> {
    private static readonly pb::MessageParser<Listing> _parser = new pb::MessageParser<Listing>(() => new Listing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Listing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tutorial.ListingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Listing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Listing(Listing other) : this() {
      programName_ = other.programName_;
      episodeName_ = other.episodeName_;
      episodeNumber_ = other.episodeNumber_;
      isLive_ = other.isLive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Listing Clone() {
      return new Listing(this);
    }

    /// <summary>Field number for the "ProgramName" field.</summary>
    public const int ProgramNameFieldNumber = 1;
    private string programName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProgramName {
      get { return programName_; }
      set {
        programName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EpisodeName" field.</summary>
    public const int EpisodeNameFieldNumber = 2;
    private string episodeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EpisodeName {
      get { return episodeName_; }
      set {
        episodeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "EpisodeNumber" field.</summary>
    public const int EpisodeNumberFieldNumber = 3;
    private int episodeNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EpisodeNumber {
      get { return episodeNumber_; }
      set {
        episodeNumber_ = value;
      }
    }

    /// <summary>Field number for the "IsLive" field.</summary>
    public const int IsLiveFieldNumber = 4;
    private bool isLive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLive {
      get { return isLive_; }
      set {
        isLive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Listing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Listing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProgramName != other.ProgramName) return false;
      if (EpisodeName != other.EpisodeName) return false;
      if (EpisodeNumber != other.EpisodeNumber) return false;
      if (IsLive != other.IsLive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProgramName.Length != 0) hash ^= ProgramName.GetHashCode();
      if (EpisodeName.Length != 0) hash ^= EpisodeName.GetHashCode();
      if (EpisodeNumber != 0) hash ^= EpisodeNumber.GetHashCode();
      if (IsLive != false) hash ^= IsLive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProgramName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProgramName);
      }
      if (EpisodeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EpisodeName);
      }
      if (EpisodeNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EpisodeNumber);
      }
      if (IsLive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProgramName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProgramName);
      }
      if (EpisodeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EpisodeName);
      }
      if (EpisodeNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EpisodeNumber);
      }
      if (IsLive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Listing other) {
      if (other == null) {
        return;
      }
      if (other.ProgramName.Length != 0) {
        ProgramName = other.ProgramName;
      }
      if (other.EpisodeName.Length != 0) {
        EpisodeName = other.EpisodeName;
      }
      if (other.EpisodeNumber != 0) {
        EpisodeNumber = other.EpisodeNumber;
      }
      if (other.IsLive != false) {
        IsLive = other.IsLive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProgramName = input.ReadString();
            break;
          }
          case 18: {
            EpisodeName = input.ReadString();
            break;
          }
          case 24: {
            EpisodeNumber = input.ReadInt32();
            break;
          }
          case 32: {
            IsLive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
